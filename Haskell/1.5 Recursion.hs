{-
Определите функцию, вычисляющую двойной факториал, то есть произведение натуральных чисел, 
не превосходящих заданного числа и имеющих ту же четность. Например: 7!!=7⋅5⋅3⋅1, 8!!=8⋅6⋅4⋅2. 
Предполагается, что аргумент функции может принимать только неотрицательные значения.
-}
doubleFact :: Integer -> Integer
doubleFact 1 = 1
doubleFact 2 = 2
doubleFact n = n * doubleFact(n - 2)

{-
оследовательность чисел Фибоначчи 0,1,1,2,3,5,8,13,21 … легко определить рекурсивно, 
задав два первых терминирующих значения и определив любое последующее как сумму двух непосредственно предыдущих:

fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

Эта функция определена лишь для неотрицательных чисел. Однако, из данного выше определения можно вывести формулу 
для вычисления чисел Фибоначчи при отрицательных индексах, при этом последовательность будет следующей:

fibonacci (-1) = 1
fibonacci (-2) = -1
fibonacci (10) = -55

Измените определение функции fibonacci так, чтобы она была определена для всех целых чисел и порождала при 
отрицательных аргументах указанную последовательность.
-}
fibonacci :: Integer -> Integer
fibonacci n | n == 0 = 0
            | n == 1 = 1
            | n == -1 = 1
            | n > 0 = fibonacci (n - 1) + fibonacci (n - 2)
            | n < 0 = (-1) ^ (-n + 1) * fibonacci (-n)

{-
С помощью механизма аккумуляторов попробуйте написать более эффективную реализацию, имеющую линейную сложность 
(по числу рекурсивных вызовов). Как и в предыдущем задании, функция должна быть определена для всех целых чисел.
-}
fibonacci :: Integer -> Integer
fibonacci n = helper 0 1 n
  where helper curr prev n
          | n == 0 = curr
          | n > 0 = helper (curr+prev) curr (n - 1)
          | n < 0 = helper prev (curr-prev) (n + 1)